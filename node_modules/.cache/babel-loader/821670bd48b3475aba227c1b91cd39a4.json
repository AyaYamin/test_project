{"ast":null,"code":"import _get from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _classCallCheck from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport { FormWithConstraints, FieldFeedback as _FieldFeedback, FieldFeedbackType, FieldFeedbacks as _FieldFeedbacks, Async as _Async, FieldEvent } from 'react-form-with-constraints';\nexport var DisplayFields =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DisplayFields, _React$Component);\n\n  function DisplayFields() {\n    var _this;\n\n    _classCallCheck(this, DisplayFields);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayFields).apply(this, arguments));\n\n    _this.reRender = function () {\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  _createClass(DisplayFields, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var form = this.context.form;\n      form.fieldsStore.addListener(FieldEvent.Added, this.reRender);\n      form.fieldsStore.addListener(FieldEvent.Removed, this.reRender);\n      form.addFieldDidValidateEventListener(this.reRender);\n      form.addFieldDidResetEventListener(this.reRender);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var form = this.context.form;\n      form.fieldsStore.removeListener(FieldEvent.Added, this.reRender);\n      form.fieldsStore.removeListener(FieldEvent.Removed, this.reRender);\n      form.removeFieldDidValidateEventListener(this.reRender);\n      form.removeFieldDidResetEventListener(this.reRender);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var str = stringifyWithUndefinedAndWithoutPropertyQuotes(this.context.form.fieldsStore.fields, 2);\n      str = str.replace(/{\\s+key: (.*),\\s+type: (.*),\\s+show: (.*)\\s+}/g, '{ key: $1, type: $2, show: $3 }');\n      return React.createElement(\"pre\", {\n        style: {\n          fontSize: 'small'\n        }\n      }, \"Fields = \", str);\n    }\n  }]);\n\n  return DisplayFields;\n}(React.Component);\nDisplayFields.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired\n};\n\nvar stringifyWithUndefinedAndWithoutPropertyQuotes = function stringifyWithUndefinedAndWithoutPropertyQuotes(obj, space) {\n  var str = JSON.stringify(obj, function (_key, value) {\n    return value === undefined ? '__undefined__' : value;\n  }, space);\n  str = str.replace(/\"__undefined__\"/g, 'undefined');\n  str = str.replace(/\"([^\"]+)\":/g, '$1:');\n  return str;\n};\n\nexport { FormWithConstraints };\nexport var FieldFeedbacks =\n/*#__PURE__*/\nfunction (_FieldFeedbacks2) {\n  _inherits(FieldFeedbacks, _FieldFeedbacks2);\n\n  function FieldFeedbacks() {\n    _classCallCheck(this, FieldFeedbacks);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FieldFeedbacks).apply(this, arguments));\n  }\n\n  _createClass(FieldFeedbacks, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          fieldName = _this$props.for,\n          stop = _this$props.stop;\n      var attr = '';\n      if (fieldName) attr += \"for=\\\"\".concat(fieldName, \"\\\" \");\n      attr += \"stop=\\\"\".concat(stop, \"\\\"\");\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", null, \"key=\\\"\", this.key, \"\\\" \", attr), React.createElement(\"ul\", null, _get(_getPrototypeOf(FieldFeedbacks.prototype), \"render\", this).call(this)));\n    }\n  }]);\n\n  return FieldFeedbacks;\n}(_FieldFeedbacks);\nexport var FieldFeedback =\n/*#__PURE__*/\nfunction (_FieldFeedback2) {\n  _inherits(FieldFeedback, _FieldFeedback2);\n\n  function FieldFeedback() {\n    _classCallCheck(this, FieldFeedback);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FieldFeedback).apply(this, arguments));\n  }\n\n  _createClass(FieldFeedback, [{\n    key: \"getTextDecoration\",\n    value: function getTextDecoration() {\n      var show = this.state.validation.show;\n      var textDecoration = '';\n\n      switch (show) {\n        case false:\n          textDecoration = 'line-through';\n          break;\n\n        case undefined:\n          textDecoration = 'line-through dotted';\n          break;\n      }\n\n      return textDecoration;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$validatio = this.state.validation,\n          key = _this$state$validatio.key,\n          type = _this$state$validatio.type;\n      return React.createElement(\"li\", null, React.createElement(\"span\", {\n        style: {\n          textDecoration: this.getTextDecoration()\n        }\n      }, \"key=\\\"\", key, \"\\\" type=\\\"\", type, \"\\\"\"), ' ', _get(_getPrototypeOf(FieldFeedback.prototype), \"render\", this).call(this));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var el = ReactDOM.findDOMNode(this);\n      var fieldFeedbackSpans = el.querySelectorAll('[data-feedback]');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = fieldFeedbackSpans[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var fieldFeedbackSpan = _step.value;\n          fieldFeedbackSpan.style.display = 'inline';\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var li = el.closest('li.async');\n\n      if (li !== null) {\n        var async = li.querySelector('span[style]');\n        async.style.textDecoration = this.getTextDecoration();\n      }\n\n      var type = this.state.validation.type;\n\n      if (type === FieldFeedbackType.WhenValid) {\n        var span = el.querySelector('span[style]');\n        var whenValid = el.querySelector(\"span.\".concat(this.props.classes.valid));\n        span.style.textDecoration = whenValid !== null ? '' : 'line-through';\n      }\n    }\n  }]);\n\n  return FieldFeedback;\n}(_FieldFeedback);\nexport var Async =\n/*#__PURE__*/\nfunction (_Async2) {\n  _inherits(Async, _Async2);\n\n  function Async() {\n    _classCallCheck(this, Async);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Async).apply(this, arguments));\n  }\n\n  _createClass(Async, [{\n    key: \"getTextDecoration\",\n    value: function getTextDecoration() {\n      return 'line-through dotted';\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      var el = ReactDOM.findDOMNode(this);\n      var async = el.querySelector('span[style]');\n      async.style.textDecoration = this.getTextDecoration();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"li\", {\n        className: \"async\"\n      }, React.createElement(\"span\", {\n        style: {\n          textDecoration: this.getTextDecoration()\n        }\n      }, \"Async\"), React.createElement(\"ul\", null, _get(_getPrototypeOf(Async.prototype), \"render\", this).call(this)));\n    }\n  }]);\n\n  return Async;\n}(_Async);","map":null,"metadata":{},"sourceType":"module"}