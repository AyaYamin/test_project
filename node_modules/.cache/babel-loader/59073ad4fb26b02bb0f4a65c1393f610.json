{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Field from './Field';\nimport EventEmitter from './EventEmitter';\nexport var FieldEvent;\n\n(function (FieldEvent) {\n  FieldEvent[\"Added\"] = \"FIELD_ADDED\";\n  FieldEvent[\"Removed\"] = \"FIELD_REMOVED\";\n})(FieldEvent || (FieldEvent = {}));\n\nexport var FieldsStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(FieldsStore, _EventEmitter);\n\n  function FieldsStore() {\n    var _this;\n\n    _classCallCheck(this, FieldsStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FieldsStore).apply(this, arguments));\n    _this.fields = new Array();\n    return _this;\n  }\n\n  _createClass(FieldsStore, [{\n    key: \"getField\",\n    value: function getField(fieldName) {\n      var fields = this.fields.filter(function (_field) {\n        return _field.name === fieldName;\n      });\n      return fields.length === 1 ? fields[0] : undefined;\n    }\n  }, {\n    key: \"addField\",\n    value: function addField(fieldName) {\n      var fields = this.fields.filter(function (_field) {\n        return _field.name === fieldName;\n      });\n      console.assert(fields.length === 0 || fields.length === 1, \"Cannot have more than 1 field matching '\".concat(fieldName, \"'\"));\n\n      if (fields.length === 0) {\n        var newField = new Field(fieldName);\n        this.fields.push(newField);\n        this.emit(FieldEvent.Added, newField);\n      } else {}\n    }\n  }, {\n    key: \"removeField\",\n    value: function removeField(fieldName) {\n      var fields = this.fields.filter(function (_field) {\n        return _field.name === fieldName;\n      });\n      var index = this.fields.indexOf(fields[0]);\n\n      if (index > -1) {\n        this.fields.splice(index, 1);\n        this.emit(FieldEvent.Removed, fieldName);\n      }\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.fields.every(function (field) {\n        return field.isValid();\n      });\n    }\n  }, {\n    key: \"hasFeedbacks\",\n    value: function hasFeedbacks() {\n      return this.fields.some(function (field) {\n        return field.hasFeedbacks();\n      });\n    }\n  }]);\n\n  return FieldsStore;\n}(EventEmitter);","map":null,"metadata":{},"sourceType":"module"}