{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { FormWithConstraints } from './FormWithConstraints';\nexport var Input =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input() {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).apply(this, arguments));\n    _this.state = {\n      field: undefined\n    };\n\n    _this.fieldWillValidate = function (fieldName) {\n      if (fieldName === _this.props.name) {\n        _this.setState({\n          field: 'pending'\n        });\n      }\n    };\n\n    _this.fieldDidValidate = function (field) {\n      if (field.name === _this.props.name) {\n        _this.setState({\n          field: field\n        });\n      }\n    };\n\n    _this.fieldDidReset = function (field) {\n      if (field.name === _this.props.name) {\n        _this.setState({\n          field: undefined\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n      this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n      this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n      this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n      this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n    }\n  }, {\n    key: \"fieldValidationStates\",\n    value: function fieldValidationStates() {\n      var field = this.state.field;\n      var states = [];\n\n      if (field !== undefined) {\n        if (field === 'pending') {\n          states.push('isPending');\n        } else {\n          if (field.hasErrors()) states.push('hasErrors');\n          if (field.hasWarnings()) states.push('hasWarnings');\n          if (field.hasInfos()) states.push('hasInfos');\n          if (field.isValid()) states.push('isValid');\n        }\n      }\n\n      return states;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          innerRef = _a.innerRef,\n          className = _a.className,\n          classes = _a.classes,\n          inputProps = __rest(_a, [\"innerRef\", \"className\", \"classes\"]);\n\n      var validationStates = this.fieldValidationStates();\n      var classNames = className;\n      validationStates.forEach(function (validationState) {\n        var tmp = classes[validationState];\n\n        if (tmp !== undefined) {\n          classNames !== undefined ? classNames += \" \".concat(tmp) : classNames = tmp;\n        }\n      });\n      return React.createElement(\"input\", Object.assign({\n        ref: innerRef\n      }, inputProps, {\n        className: classNames\n      }));\n    }\n  }]);\n\n  return Input;\n}(React.Component);\nInput.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired\n};\nInput.defaultProps = {\n  classes: {\n    isPending: 'is-pending',\n    hasErrors: 'has-errors',\n    hasWarnings: 'has-warnings',\n    hasInfos: 'has-infos',\n    isValid: 'is-valid'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}