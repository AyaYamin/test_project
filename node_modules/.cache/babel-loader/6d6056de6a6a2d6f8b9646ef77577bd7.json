{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\xx-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { FormWithConstraints } from './FormWithConstraints';\nimport { FieldFeedbacks } from './FieldFeedbacks';\nimport { Async } from './Async';\nimport { FieldFeedbackWhenValid } from './FieldFeedbackWhenValid';\nimport FieldFeedbackType from './FieldFeedbackType';\nexport var FieldFeedback =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FieldFeedback, _React$Component);\n\n  function FieldFeedback(props, context) {\n    var _this;\n\n    _classCallCheck(this, FieldFeedback);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FieldFeedback).call(this, props, context));\n\n    _this.validate = function (input) {\n      var when = _this.props.when;\n      var _this$context = _this.context,\n          form = _this$context.form,\n          fieldFeedbacks = _this$context.fieldFeedbacks;\n      var field = form.fieldsStore.getField(input.name);\n      var validation = Object.assign({}, _this.state.validation);\n\n      if (fieldFeedbacks.props.stop === 'first' && field.hasFeedbacks(fieldFeedbacks.key) || fieldFeedbacks.props.stop === 'first-error' && field.hasErrors(fieldFeedbacks.key) || fieldFeedbacks.props.stop === 'first-warning' && field.hasWarnings(fieldFeedbacks.key) || fieldFeedbacks.props.stop === 'first-info' && field.hasInfos(fieldFeedbacks.key)) {\n        validation.show = undefined;\n      } else {\n        validation.show = false;\n\n        if (typeof when === 'function') {\n          validation.show = when(input.value);\n        } else if (typeof when === 'string') {\n          if (when === 'valid') {\n            validation.show = undefined;\n          } else {\n            var validity = input.validity;\n\n            if (!validity.valid) {\n              if (when === '*') {\n                validation.show = true;\n              } else if (validity.badInput && when === 'badInput' || validity.patternMismatch && when === 'patternMismatch' || validity.rangeOverflow && when === 'rangeOverflow' || validity.rangeUnderflow && when === 'rangeUnderflow' || validity.stepMismatch && when === 'stepMismatch' || validity.tooLong && when === 'tooLong' || validity.tooShort && when === 'tooShort' || validity.typeMismatch && when === 'typeMismatch' || validity.valueMissing && when === 'valueMissing') {\n                validation.show = true;\n              }\n            }\n          }\n        } else {\n          throw new TypeError(\"Invalid FieldFeedback 'when' type: \".concat(typeof when));\n        }\n      }\n\n      field.addOrReplaceValidation(validation);\n\n      _this.setState({\n        validation: validation,\n        validationMessage: input.validationMessage\n      });\n\n      return validation;\n    };\n\n    _this.fieldDidReset = function (field) {\n      if (field.name === _this.context.fieldFeedbacks.fieldName) {\n        _this.setState(function (prevState) {\n          return {\n            validation: Object.assign({}, prevState.validation, {\n              show: undefined\n            }),\n            validationMessage: ''\n          };\n        });\n      }\n    };\n\n    _this.key = context.fieldFeedbacks.addFieldFeedback();\n    var error = props.error,\n        warning = props.warning,\n        info = props.info,\n        when = props.when;\n    var type = FieldFeedbackType.Error;\n    if (when === 'valid') type = FieldFeedbackType.WhenValid;else if (warning) type = FieldFeedbackType.Warning;else if (info) type = FieldFeedbackType.Info;\n\n    if (type === FieldFeedbackType.WhenValid && (error || warning || info)) {\n      throw new Error('Cannot have an attribute (error, warning...) with FieldFeedback when=\"valid\"');\n    }\n\n    _this.state = {\n      validation: {\n        key: _this.key,\n        type: type,\n        show: undefined\n      },\n      validationMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(FieldFeedback, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$context2 = this.context,\n          form = _this$context2.form,\n          fieldFeedbacks = _this$context2.fieldFeedbacks,\n          async = _this$context2.async;\n      if (async) async.addValidateFieldEventListener(this.validate);else fieldFeedbacks.addValidateFieldEventListener(this.validate);\n      form.addFieldDidResetEventListener(this.fieldDidReset);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$context3 = this.context,\n          form = _this$context3.form,\n          fieldFeedbacks = _this$context3.fieldFeedbacks,\n          async = _this$context3.async;\n      if (async) async.removeValidateFieldEventListener(this.validate);else fieldFeedbacks.removeValidateFieldEventListener(this.validate);\n      form.removeFieldDidResetEventListener(this.fieldDidReset);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          when = _a.when,\n          error = _a.error,\n          warning = _a.warning,\n          info = _a.info,\n          className = _a.className,\n          classes = _a.classes,\n          style = _a.style,\n          children = _a.children,\n          otherProps = __rest(_a, [\"when\", \"error\", \"warning\", \"info\", \"className\", \"classes\", \"style\", \"children\"]);\n\n      var _this$state = this.state,\n          validation = _this$state.validation,\n          validationMessage = _this$state.validationMessage;\n      var fieldFeedbackClassName = classes[validation.type];\n      var classNames = className !== undefined ? \"\".concat(className, \" \").concat(fieldFeedbackClassName) : fieldFeedbackClassName;\n\n      if (validation.type === FieldFeedbackType.WhenValid) {\n        return React.createElement(FieldFeedbackWhenValid, Object.assign({\n          \"data-feedback\": this.key,\n          style: style,\n          className: classNames\n        }, otherProps), children);\n      }\n\n      if (validation.show) {\n        var feedback = children !== undefined ? children : validationMessage;\n        return React.createElement(\"span\", Object.assign({\n          \"data-feedback\": this.key,\n          className: classNames,\n          style: Object.assign({\n            display: 'block'\n          }, style)\n        }, otherProps), feedback);\n      }\n\n      return null;\n    }\n  }]);\n\n  return FieldFeedback;\n}(React.Component);\nFieldFeedback.defaultProps = {\n  when: function when() {\n    return true;\n  },\n  classes: {\n    error: 'error',\n    warning: 'warning',\n    info: 'info',\n    whenValid: 'when-valid'\n  }\n};\nFieldFeedback.contextTypes = {\n  form: PropTypes.instanceOf(FormWithConstraints).isRequired,\n  fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired,\n  async: PropTypes.instanceOf(Async)\n};","map":null,"metadata":{},"sourceType":"module"}