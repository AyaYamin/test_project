{"ast":null,"code":"import _defineProperty from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _regeneratorRuntime from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\xampp1\\\\htdocs\\\\teacher11\\\\src\\\\views\\\\UserProfile\\\\form1.tsx\";\nimport React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { FormWithConstraints, FieldFeedbacks, Async, FieldFeedback } from 'react-form-with-constraints';\nimport 'views/UserProfile/style.css';\n\nvar sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}; // See https://en.wikipedia.org/wiki/List_of_the_most_common_passwords\n\n\nvar isACommonPassword =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(password) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('isACommonPassword');\n            _context.next = 3;\n            return sleep(1000);\n\n          case 3:\n            return _context.abrupt(\"return\", ['123456', 'password', '12345678', 'qwerty', '12345', '123456789', 'letmein', '1234567', 'football', 'iloveyou', 'admin', 'welcome', 'monkey', 'login', 'abc123'].includes(password.toLowerCase()));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function isACommonPassword(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.form = null;\n    _this.password = null;\n    _this.state = {\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      signUpButtonDisabled: false\n    };\n\n    _this.handleChange =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var target, fields, fieldIsValid;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                target = e.target; // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\n                // @ts-ignore\n\n                _this.setState(_defineProperty({}, target.name, target.value)); // Validates only the given field and returns the related FieldValidation structures\n\n\n                _context2.next = 4;\n                return _this.form.validateFields(target);\n\n              case 4:\n                fields = _context2.sent;\n                fieldIsValid = fields.every(function (fieldFeedbacksValidation) {\n                  return fieldFeedbacksValidation.isValid();\n                });\n                if (fieldIsValid) console.log(\"Field '\".concat(target.name, \"' is valid\"));else console.log(\"Field '\".concat(target.name, \"' is invalid\"));\n                if (_this.form.isValid()) console.log('The form is valid');else console.log('The form is invalid');\n\n                _this.setState({\n                  signUpButtonDisabled: !_this.form.isValid()\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handlePasswordChange =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(e) {\n        var target, fields, fieldsAreValid;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                target = e.target; // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\n                // @ts-ignore\n\n                _this.setState(_defineProperty({}, target.name, target.value));\n\n                _context3.next = 4;\n                return _this.form.validateFields(target, 'passwordConfirm');\n\n              case 4:\n                fields = _context3.sent;\n                fieldsAreValid = fields.every(function (field) {\n                  return field.isValid();\n                });\n                if (fieldsAreValid) console.log(\"Fields '\".concat(target.name, \"' and 'passwordConfirm' are valid\"));else console.log(\"Fields '\".concat(target.name, \"' and/or 'passwordConfirm' are invalid\"));\n                if (_this.form.isValid()) console.log('The form is valid');else console.log('The form is invalid');\n\n                _this.setState({\n                  signUpButtonDisabled: !_this.form.isValid()\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(e) {\n        var fields, formIsValid;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                e.preventDefault(); // Validates the non-dirty fields and returns the related FieldValidation structures\n\n                _context4.next = 3;\n                return _this.form.validateForm();\n\n              case 3:\n                fields = _context4.sent;\n                // or simply use this.form.isValid()\n                formIsValid = fields.every(function (field) {\n                  return field.isValid();\n                });\n                if (formIsValid) console.log('The form is valid');else console.log('The form is invalid');\n\n                _this.setState({\n                  signUpButtonDisabled: !formIsValid\n                });\n\n                if (formIsValid) {\n                  alert(\"Valid form\\n\\nthis.state =\\n\".concat(JSON.stringify(_this.state, null, 2)));\n                }\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(FormWithConstraints, {\n        ref: function ref(formWithConstraints) {\n          return _this2.form = formWithConstraints;\n        },\n        onSubmit: this.handleSubmit,\n        noValidate: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        style: {\n          color: \"#000\",\n          alignContent: \"Center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Email\")), React.createElement(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        id: \"email\",\n        value: this.state.email,\n        onChange: this.handleChange,\n        required: true,\n        minLength: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(FieldFeedbacks, {\n        for: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(FieldFeedback, {\n        when: \"tooShort\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Too short\"), React.createElement(FieldFeedback, {\n        when: \"*\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(FieldFeedback, {\n        when: \"valid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Looks good!\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        htmlFor: \"password\",\n        style: {\n          color: \"#000\",\n          alignContent: \"Center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Password\")), React.createElement(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        ref: function ref(password) {\n          return _this2.password = password;\n        },\n        value: this.state.password,\n        onChange: this.handlePasswordChange,\n        required: true,\n        pattern: \".{5,}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(FieldFeedbacks, {\n        for: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(FieldFeedback, {\n        when: \"valueMissing\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(FieldFeedback, {\n        when: \"patternMismatch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Should be at least 5 characters long\"), React.createElement(FieldFeedback, {\n        when: function when(value) {\n          return !/\\d/.test(value);\n        },\n        warning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Should contain numbers\"), \" \"), React.createElement(FieldFeedback, {\n        when: function when(value) {\n          return !/[a-z]/.test(value);\n        },\n        warning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Should contain small letters\")), React.createElement(FieldFeedback, {\n        when: function when(value) {\n          return !/[A-Z]/.test(value);\n        },\n        warning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Should contain capital letters\")), React.createElement(FieldFeedback, {\n        when: function when(value) {\n          return !/\\W/.test(value);\n        },\n        warning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Should contain special characters\")), React.createElement(Async, {\n        promise: isACommonPassword,\n        pending: React.createElement(\"span\", {\n          style: {\n            display: 'block'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, \"...\"),\n        then: function then(commonPassword) {\n          return commonPassword ? React.createElement(FieldFeedback, {\n            warning: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, \"This password is very common\") : null;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(FieldFeedback, {\n        when: \"valid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Looks good!\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"password-confirm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Confirm Password\"), React.createElement(\"input\", {\n        type: \"password\",\n        name: \"passwordConfirm\",\n        id: \"password-confirm\",\n        value: this.state.passwordConfirm,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(FieldFeedbacks, {\n        for: \"passwordConfirm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(FieldFeedback, {\n        when: function when(value) {\n          return value !== _this2.password.value;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Not the same password\"))), React.createElement(\"button\", {\n        disabled: this.state.signUpButtonDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Sign Up\"));\n    }\n  }]);\n\n  return Form;\n}(React.Component); //ReactDOM.render(<Form />, document.getElementById('app'));\n\n\nexport { Form as default };","map":{"version":3,"sources":["C:\\xampp1\\htdocs\\teacher11\\src\\views\\UserProfile\\form1.tsx"],"names":["React","InputLabel","FormWithConstraints","FieldFeedbacks","Async","FieldFeedback","sleep","ms","Promise","resolve","setTimeout","isACommonPassword","password","console","log","includes","toLowerCase","Form","form","state","email","passwordConfirm","signUpButtonDisabled","handleChange","e","target","setState","name","value","validateFields","fields","fieldIsValid","every","fieldFeedbacksValidation","isValid","handlePasswordChange","fieldsAreValid","field","handleSubmit","preventDefault","validateForm","formIsValid","alert","JSON","stringify","formWithConstraints","color","alignContent","test","display","commonPassword","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport { FormWithConstraints, FieldFeedbacks, Async, FieldFeedback } from 'react-form-with-constraints';\r\nimport { DisplayFields } from 'react-form-with-constraints-tools';\r\n\r\nimport 'views/UserProfile/style.css';\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// See https://en.wikipedia.org/wiki/List_of_the_most_common_passwords\r\nconst isACommonPassword = async (password: string) => {\r\n  console.log('isACommonPassword');\r\n  await sleep(1000);\r\n  return [\r\n    '123456',\r\n    'password',\r\n    '12345678',\r\n    'qwerty',\r\n    '12345',\r\n    '123456789',\r\n    'letmein',\r\n    '1234567',\r\n    'football',\r\n    'iloveyou',\r\n    'admin',\r\n    'welcome',\r\n    'monkey',\r\n    'login',\r\n    'abc123'\r\n  ].includes(password.toLowerCase());\r\n};\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  email: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n  signUpButtonDisabled: boolean;\r\n}\r\n\r\nexport default class Form extends React.Component<Props, State> {\r\n  form: FormWithConstraints | null = null;\r\n  password: HTMLInputElement | null = null;\r\n\r\n  state: State = {\r\n    email: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n    signUpButtonDisabled: false\r\n  };\r\n\r\n  handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = e.target;\r\n\r\n    // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\r\n    // @ts-ignore\r\n    this.setState({\r\n      [target.name as keyof State]: target.value\r\n    });\r\n\r\n    // Validates only the given field and returns the related FieldValidation structures\r\n    const fields = await this.form!.validateFields(target);\r\n\r\n    const fieldIsValid = fields.every(fieldFeedbacksValidation => fieldFeedbacksValidation.isValid());\r\n    if (fieldIsValid) console.log(`Field '${target.name}' is valid`);\r\n    else console.log(`Field '${target.name}' is invalid`);\r\n\r\n    if (this.form!.isValid()) console.log('The form is valid');\r\n    else console.log('The form is invalid');\r\n\r\n    this.setState({signUpButtonDisabled: !this.form!.isValid()});\r\n  }\r\n\r\n  handlePasswordChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = e.target;\r\n\r\n    // FIXME See Computed property key names should not be widened https://github.com/Microsoft/TypeScript/issues/13948\r\n    // @ts-ignore\r\n    this.setState({\r\n      [target.name as keyof State]: target.value\r\n    });\r\n\r\n    const fields = await this.form!.validateFields(target, 'passwordConfirm');\r\n\r\n    const fieldsAreValid = fields.every(field => field.isValid());\r\n    if (fieldsAreValid) console.log(`Fields '${target.name}' and 'passwordConfirm' are valid`);\r\n    else console.log(`Fields '${target.name}' and/or 'passwordConfirm' are invalid`);\r\n\r\n    if (this.form!.isValid()) console.log('The form is valid');\r\n    else console.log('The form is invalid');\r\n\r\n    this.setState({signUpButtonDisabled: !this.form!.isValid()});\r\n  }\r\n\r\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    // Validates the non-dirty fields and returns the related FieldValidation structures\r\n    const fields = await this.form!.validateForm();\r\n\r\n    // or simply use this.form.isValid()\r\n    const formIsValid = fields.every(field => field.isValid());\r\n\r\n    if (formIsValid) console.log('The form is valid');\r\n    else console.log('The form is invalid');\r\n\r\n    this.setState({signUpButtonDisabled: !formIsValid});\r\n    if (formIsValid) {\r\n      alert(`Valid form\\n\\nthis.state =\\n${JSON.stringify(this.state, null, 2)}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FormWithConstraints ref={formWithConstraints => this.form = formWithConstraints}\r\n                           onSubmit={this.handleSubmit} noValidate>\r\n        <div>\r\n          <label htmlFor=\"email\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>Email</b></label>\r\n          <input type=\"email\" name=\"email\" id=\"email\"\r\n                 value={this.state.email} onChange={this.handleChange}\r\n                 required minLength={5} />\r\n          <FieldFeedbacks for=\"email\">\r\n            <FieldFeedback when=\"tooShort\">Too short</FieldFeedback>\r\n            <FieldFeedback when=\"*\" />\r\n            <FieldFeedback when=\"valid\">Looks good!</FieldFeedback>\r\n          </FieldFeedbacks>\r\n        </div>\r\n\r\n        <div>\r\n          <InputLabel htmlFor=\"password\" style={{ color: \"#000\", alignContent: \"Center\" }}><b>Password</b></InputLabel>\r\n          <input type=\"password\" name=\"password\" id=\"password\"\r\n                 ref={password => this.password = password}\r\n                 value={this.state.password} onChange={this.handlePasswordChange}\r\n                 required pattern=\".{5,}\" />\r\n          <FieldFeedbacks for=\"password\">\r\n            <FieldFeedback when=\"valueMissing\" />\r\n            <FieldFeedback when=\"patternMismatch\">Should be at least 5 characters long</FieldFeedback>\r\n            <FieldFeedback when={value => !/\\d/.test(value)} warning ><b>Should contain numbers</b> </FieldFeedback>\r\n            <FieldFeedback when={value => !/[a-z]/.test(value)} warning><b>Should contain small letters</b></FieldFeedback>\r\n            <FieldFeedback when={value => !/[A-Z]/.test(value)} warning><b>Should contain capital letters</b></FieldFeedback>\r\n            <FieldFeedback when={value => !/\\W/.test(value)} warning><b>Should contain special characters</b></FieldFeedback>\r\n            <Async\r\n              promise={isACommonPassword}\r\n              pending={<span style={{display: 'block'}}>...</span>}\r\n              then={commonPassword => commonPassword ?\r\n                <FieldFeedback warning>This password is very common</FieldFeedback> : null\r\n              }\r\n            />\r\n            <FieldFeedback when=\"valid\">Looks good!</FieldFeedback>\r\n          </FieldFeedbacks>\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"password-confirm\">Confirm Password</label>\r\n          <input type=\"password\" name=\"passwordConfirm\" id=\"password-confirm\"\r\n                 value={this.state.passwordConfirm} onChange={this.handleChange} />\r\n          <FieldFeedbacks for=\"passwordConfirm\">\r\n            <FieldFeedback when={value => value !== this.password!.value}>Not the same password</FieldFeedback>\r\n          </FieldFeedbacks>\r\n        </div>\r\n\r\n        <button disabled={this.state.signUpButtonDisabled}>Sign Up</button>\r\n\r\n      \r\n      </FormWithConstraints>\r\n    );\r\n  }\r\n}\r\n\r\n//ReactDOM.render(<Form />, document.getElementById('app'));\r\n"]},"metadata":{},"sourceType":"module"}